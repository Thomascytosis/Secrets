//jshint esversion:6 --- setup code
require("dotenv").config(); //environmental security always place at top
const express = require("express");
const bodyParser = require("body-parser");
const ejs = require("ejs");
const mongoose = require("mongoose");
const session = require("express-session"); //required for passport
const passport = require("passport"); //use passport
const passportLocalMongoose = require("passport-local-mongoose"); //use passport
// const encrypt = require("mongoose-encryption") changing to md5
// const md5 = require("md5"); change to bcrypt
// const bcrypt = require("bcrypt"); //use salt on hash - remove for passport
// const saltRounds = 10; //rounds of salting the hash - remove for passport

const app = express();

// console.log(process.env.API_KEY); //example on how to get from .env file

//important to place session code HERE - Passport Code
app.use(session({
    secret: "ourLittleSecret",
    resave: false,
    saveUinitialized: false
}));
// keep passport code in this order
app.use(passport.initialize()); //initialize passport code
app.use(passport.session()); //start passport session

app.use(express.static("public"));
app.set("view engine", "ejs");
app.use(bodyParser.urlencoded({
    extended: true
}));

//mongodb code
mongoose.connect("mongodb://localhost:27017/userDB", {useNewUrlParser: true});
// add new mongoose.schema to use mongoose encrypt
const userSchema = new mongoose.Schema({
    email: String,
    password: String,
});
//passport local mongoose uses mongoose Schema
userSchema.plugin(passportLocalMongoose); //modifies schema to use passport

//important to add encrypt plugin before User mongoose.Model

// *cut constant for secrets and placed in .env file

//add additional fields to be encrypted with |, "anotherfield"| - change to md5
// userSchema.plugin(encrypt, { secret: process.env.SECRET, encryptedFields: ["password"] });

const User = new mongoose.model("User", userSchema);
//passport code
passport.use(User.createStrategy()); //building template for cookie

passport.serializeUser(User.serializeUser()); //Start Cookie
passport.deserializeUser(User.deserializeUser()); //end cookie


//Url page code
app.get("/", function(req,res){
    res.render("home");
});
app.get("/login", function(req,res){
    res.render("login");
});
app.get("/register", function(req,res){
    res.render("register");
});
// secerts access with authentication
app.get("/secrets", function(req,res){
    if (req.isAuthenticated()){
        res.render("secrets");
    } else {
        res.redirect("/login");
    }
});
// logout with passport
app.get("/logout", function(req,res){
    req.logout();
    res.redirect("/");
});


//web page submit register route code, save to DB, redirect to secrets page.
app.post("/register", function(req,res){
    User.register({username: req.body.username}, req.body.password, function(err,user){
        if (err) {
            console.log(err);
            res.redirect("/register");
        } else {
            passport.authenticate("local")(req, res, function(){
                res.redirect("/secrets");
            });
        }
    });
    //code for bcrypt and salting hash - remove for passport
    // bcrypt.hash(req.body.password, saltRounds, function(err,hash){
    //     const newUser = new User({
    //         email: req.body.username,
    //         password: hash
    //     });
    //     newUser.save(function(err){
    //         if (err){
    //             console.log(err);
    //         }else {
    //             res.render("secrets");
    //         }
    //     });
    // });
    // code for md5 without brcypt
    // const newUser = new User({
    //     email: req.body.username,
    //     password: md5(req.body.password) //md5 change
    // });
    // newUser.save(function(err){
    //     if (err){
    //         console.log(err);
    //     }else {
    //         res.render("secrets");
    //     }
    // });
});

//web page login route code, check db, redirect
app.post("/login", function(req,res){

    const user = new User({
        username: req.body.username,
        password: req.body.password
    });

    req.login(user,function(err){
        if (err) {
            console.log(err);
        } else {
            passport.authenticate("local")(req,res, function(){
                res.redirect("/secrets");
            });
        }
    });


    //remove for passport
    // const userName = req.body.username;
    // // const password = md5(req.body.password); //md5 change
    // const password = req.body.password; //change to bcrypt

    // User.findOne({email: userName}, function(err, foundUser){
    //     if (err){
    //         console.log(err);
    //     } else {
    //         if (foundUser){
    //             bcrypt.compare(password, foundUser.password, function(err, result) {
    //                 if (result === true){
    //             // if (foundUser.password === password){ before bcrypt
    //                 res.render("secrets");
    //                 }
    //             });
    //         }
    //     }
    // });
});


//server code
app.listen(3000, function(){
    console.log("Now serving port 3000");
});